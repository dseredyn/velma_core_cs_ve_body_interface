import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rosclock");
ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("rtt_geometry_msgs");
ros.import("rtt_velma_low_level_interface_msgs");
ros.import("velma_low_level_interface");

ros.import("eigen_typekit");
ros.import("rtt_std_msgs");
ros.import("port_operations");

ros.import("conman");
ros.import("conman_ros");

#
# the interfaces under test
#

var ConnPolicy cpTx;
cpTx.transport = 2;                 # the MQueue protocol id
cpTx.name_id   = "/lli_status";     # the connection id

loadComponent("lli_lo_tx","VelmaLLILoTx")
setActivity("lli_lo_tx", 0, 1, ORO_SCHED_RT);
lli_lo_tx.configure();
stream("lli_lo_tx.status_OUTPORT", cpTx);

loadComponent("lli_lo_rx","VelmaLLILoRx")
setActivity("lli_lo_rx", 0, 1, ORO_SCHED_RT);
lli_lo_rx.configure();

#
# the actual testing component
#
loadComponent("lli_lo_test","VelmaLLILoTest")
setActivity("lli_lo_test", 0, 1, ORO_SCHED_RT);
lli_lo_test.configure();

# command
connect("lli_lo_rx.cmd_rArm_t_OUTPORT",         "lli_lo_test.cmd_rArm_t_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rArm_cmd_OUTPORT",       "lli_lo_test.cmd_rArm_cmd_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rHand_q_OUTPORT",        "lli_lo_test.cmd_rHand_q_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rHand_dq_OUTPORT",       "lli_lo_test.cmd_rHand_dq_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rHand_max_p_OUTPORT",    "lli_lo_test.cmd_rHand_max_p_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rHand_max_i_OUTPORT",    "lli_lo_test.cmd_rHand_max_i_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_rHand_hold_OUTPORT",     "lli_lo_test.cmd_rHand_hold_INPORT", ConnPolicy())

connect("lli_lo_rx.cmd_lArm_t_OUTPORT",         "lli_lo_test.cmd_lArm_t_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lArm_cmd_OUTPORT",       "lli_lo_test.cmd_lArm_cmd_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lHand_q_OUTPORT",        "lli_lo_test.cmd_lHand_q_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lHand_dq_OUTPORT",       "lli_lo_test.cmd_lHand_dq_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lHand_max_p_OUTPORT",    "lli_lo_test.cmd_lHand_max_p_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lHand_max_i_OUTPORT",    "lli_lo_test.cmd_lHand_max_i_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_lHand_hold_OUTPORT",     "lli_lo_test.cmd_lHand_hold_INPORT", ConnPolicy())

connect("lli_lo_rx.cmd_rHand_tactileCmd_OUTPORT",   "lli_lo_test.cmd_rHand_tactileCmd_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_tMotor_i_OUTPORT",           "lli_lo_test.cmd_tMotor_i_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_hpMotor_i_OUTPORT",          "lli_lo_test.cmd_hpMotor_i_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_htMotor_i_OUTPORT",          "lli_lo_test.cmd_htMotor_i_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_hpMotor_q_OUTPORT",          "lli_lo_test.cmd_hpMotor_q_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_htMotor_q_OUTPORT",          "lli_lo_test.cmd_htMotor_q_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_hpMotor_dq_OUTPORT",         "lli_lo_test.cmd_hpMotor_dq_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_htMotor_dq_OUTPORT",         "lli_lo_test.cmd_htMotor_dq_INPORT", ConnPolicy())
connect("lli_lo_rx.cmd_test_OUTPORT",               "lli_lo_test.cmd_test_INPORT", ConnPolicy())

# status
connect("lli_lo_test.status_rArm_q_OUTPORT",              "lli_lo_tx.status_rArm_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_dq_OUTPORT",             "lli_lo_tx.status_rArm_dq_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_t_OUTPORT",              "lli_lo_tx.status_rArm_t_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_gt_OUTPORT",             "lli_lo_tx.status_rArm_gt_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_w_OUTPORT",              "lli_lo_tx.status_rArm_w_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_mmx_OUTPORT",            "lli_lo_tx.status_rArm_mmx_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_friIntfState_OUTPORT",   "lli_lo_tx.status_rArm_friIntfState_INPORT", ConnPolicy())
connect("lli_lo_test.status_rArm_friRobotState_OUTPORT",  "lli_lo_tx.status_rArm_friRobotState_INPORT", ConnPolicy())
connect("lli_lo_test.status_rHand_q_OUTPORT",             "lli_lo_tx.status_rHand_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_rHand_s_OUTPORT",             "lli_lo_tx.status_rHand_s_INPORT", ConnPolicy())

connect("lli_lo_test.status_lArm_q_OUTPORT",              "lli_lo_tx.status_lArm_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_dq_OUTPORT",             "lli_lo_tx.status_lArm_dq_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_t_OUTPORT",              "lli_lo_tx.status_lArm_t_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_gt_OUTPORT",             "lli_lo_tx.status_lArm_gt_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_w_OUTPORT",              "lli_lo_tx.status_lArm_w_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_mmx_OUTPORT",            "lli_lo_tx.status_lArm_mmx_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_friIntfState_OUTPORT",   "lli_lo_tx.status_lArm_friIntfState_INPORT", ConnPolicy())
connect("lli_lo_test.status_lArm_friRobotState_OUTPORT",  "lli_lo_tx.status_lArm_friRobotState_INPORT", ConnPolicy())
connect("lli_lo_test.status_lHand_q_OUTPORT",             "lli_lo_tx.status_lHand_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_lHand_s_OUTPORT",             "lli_lo_tx.status_lHand_s_INPORT", ConnPolicy())

connect("lli_lo_test.status_tMotor_q_OUTPORT",            "lli_lo_tx.status_tMotor_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_tMotor_dq_OUTPORT",           "lli_lo_tx.status_tMotor_dq_INPORT", ConnPolicy())
connect("lli_lo_test.status_hpMotor_q_OUTPORT",           "lli_lo_tx.status_hpMotor_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_hpMotor_dq_OUTPORT",          "lli_lo_tx.status_hpMotor_dq_INPORT", ConnPolicy())
connect("lli_lo_test.status_htMotor_q_OUTPORT",           "lli_lo_tx.status_htMotor_q_INPORT", ConnPolicy())
connect("lli_lo_test.status_htMotor_dq_OUTPORT",          "lli_lo_tx.status_htMotor_dq_INPORT", ConnPolicy())
connect("lli_lo_test.status_rHand_p_OUTPORT",             "lli_lo_tx.status_rHand_p_INPORT", ConnPolicy())
connect("lli_lo_test.status_lHand_f_OUTPORT",             "lli_lo_tx.status_lHand_f_INPORT", ConnPolicy())

connect("lli_lo_test.status_rFt_rw_OUTPORT",              "lli_lo_tx.status_rFt_rw_INPORT", ConnPolicy())
connect("lli_lo_test.status_rFt_ffw_OUTPORT",             "lli_lo_tx.status_rFt_ffw_INPORT", ConnPolicy())
connect("lli_lo_test.status_rFt_sfw_OUTPORT",             "lli_lo_tx.status_rFt_sfw_INPORT", ConnPolicy())
connect("lli_lo_test.status_lFt_rw_OUTPORT",              "lli_lo_tx.status_lFt_rw_INPORT", ConnPolicy())
connect("lli_lo_test.status_lFt_ffw_OUTPORT",             "lli_lo_tx.status_lFt_ffw_INPORT", ConnPolicy())
connect("lli_lo_test.status_lFt_sfw_OUTPORT",             "lli_lo_tx.status_lFt_sfw_INPORT", ConnPolicy())
connect("lli_lo_test.status_test_OUTPORT",                "lli_lo_tx.status_test_INPORT", ConnPolicy())

#
# the emergency command component
#
loadComponent("lli_test_error","VelmaTestError")
setActivity("lli_test_error", 0, 1, ORO_SCHED_RT);
lli_test_error.configure();

connect("lli_lo_rx.comm_status_OUTPORT",        "lli_test_error.comm_status_INPORT", ConnPolicy());

# command
connect("lli_test_error.cmd_rArm_t_OUTPORT",            "lli_lo_test.cmd_rArm_t_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rArm_cmd_OUTPORT",          "lli_lo_test.cmd_rArm_cmd_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rHand_q_OUTPORT",           "lli_lo_test.cmd_rHand_q_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rHand_dq_OUTPORT",          "lli_lo_test.cmd_rHand_dq_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rHand_max_p_OUTPORT",       "lli_lo_test.cmd_rHand_max_p_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rHand_max_i_OUTPORT",       "lli_lo_test.cmd_rHand_max_i_INPORT", ConnPolicy())
connect("lli_test_error.cmd_rHand_hold_OUTPORT",        "lli_lo_test.cmd_rHand_hold_INPORT", ConnPolicy())

connect("lli_test_error.cmd_lArm_t_OUTPORT",            "lli_lo_test.cmd_lArm_t_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lArm_cmd_OUTPORT",          "lli_lo_test.cmd_lArm_cmd_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lHand_q_OUTPORT",           "lli_lo_test.cmd_lHand_q_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lHand_dq_OUTPORT",          "lli_lo_test.cmd_lHand_dq_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lHand_max_p_OUTPORT",       "lli_lo_test.cmd_lHand_max_p_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lHand_max_i_OUTPORT",       "lli_lo_test.cmd_lHand_max_i_INPORT", ConnPolicy())
connect("lli_test_error.cmd_lHand_hold_OUTPORT",        "lli_lo_test.cmd_lHand_hold_INPORT", ConnPolicy())

connect("lli_test_error.cmd_rHand_tactileCmd_OUTPORT",  "lli_lo_test.cmd_rHand_tactileCmd_INPORT", ConnPolicy())
connect("lli_test_error.cmd_tMotor_i_OUTPORT",          "lli_lo_test.cmd_tMotor_i_INPORT", ConnPolicy())
connect("lli_test_error.cmd_hpMotor_i_OUTPORT",         "lli_lo_test.cmd_hpMotor_i_INPORT", ConnPolicy())
connect("lli_test_error.cmd_htMotor_i_OUTPORT",         "lli_lo_test.cmd_htMotor_i_INPORT", ConnPolicy())
connect("lli_test_error.cmd_hpMotor_q_OUTPORT",         "lli_lo_test.cmd_hpMotor_q_INPORT", ConnPolicy())
connect("lli_test_error.cmd_htMotor_q_OUTPORT",         "lli_lo_test.cmd_htMotor_q_INPORT", ConnPolicy())
connect("lli_test_error.cmd_hpMotor_dq_OUTPORT",        "lli_lo_test.cmd_hpMotor_dq_INPORT", ConnPolicy())
connect("lli_test_error.cmd_htMotor_dq_OUTPORT",        "lli_lo_test.cmd_htMotor_dq_INPORT", ConnPolicy())
connect("lli_test_error.cmd_test_OUTPORT",              "lli_lo_test.cmd_test_INPORT", ConnPolicy())

#
# the sim time component
#
#loadComponent("lli_test_time","VelmaTestTime")
#setActivity("lli_test_time", 0.001, 1, ORO_SCHED_RT);
#lli_test_time.configure();

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.001, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

addPeer("scheme", "lli_lo_test");
addPeer("scheme", "lli_lo_rx");
addPeer("scheme", "lli_lo_tx");
addPeer("scheme", "lli_test_error");
scheme.addBlock("lli_lo_test");
scheme.addBlock("lli_lo_rx");
scheme.addBlock("lli_lo_tx");
scheme.addBlock("lli_test_error");

#lli_test_time.start();

lli_lo_tx.start();
lli_lo_rx.start();
lli_lo_test.start();
lli_test_error.start();

#scheme.loadService("sim_clock_activity");

scheme.start();



