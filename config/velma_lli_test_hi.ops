import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("rtt_velma_low_level_interface_msgs");
ros.import("velma_low_level_interface");
ros.import("conman");
ros.import("conman_ros");

ros.import("eigen_typekit");
ros.import("rtt_std_msgs");
ros.import("port_operations");

var ConnPolicy cpRx;
cpRx.transport = 2;                 # the MQueue protocol id
cpRx.name_id   = "/lli_status";     # the connection id

loadComponent("lli_hi_rx","VelmaLLIHiRx")
setActivity("lli_hi_rx", 0, 1, ORO_SCHED_RT);
lli_hi_rx.configure();
stream("lli_hi_rx.status_INPORT", cpRx);

var ConnPolicy cpTx;
cpTx.transport = 2;                 # the MQueue protocol id
cpTx.name_id   = "/lli_command";    # the connection id

loadComponent("lli_hi_tx","VelmaLLIHiTx")
setActivity("lli_hi_tx", 0.5, 1, ORO_SCHED_RT);
lli_hi_tx.configure();
stream("lli_hi_tx.command_OUTPORT", cpTx);

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
#loadComponent("scheme", "conman::Scheme");
#setActivity("scheme", 1.0, 5, ORO_SCHED_RT);
#scheme.loadService("conman_ros");
#scheme.configure();

#addPeer("scheme", "lli_hi_rx");
#addPeer("scheme", "lli_hi_tx");
#scheme.addBlock("lli_hi_rx");
#scheme.addBlock("lli_hi_tx");

#scheme.start();

lli_hi_rx.start();
lli_hi_tx.start();

